/**
* Written by Mathew Henson
* Based on the work by https://github.com/aldipower/nodejs-recaptcha
*/

declare module "recaptcha-async" {

	export interface ICaptureResponse
	{
		is_valid: boolean;
		error: string;
	}

	export class reCaptcha
	{
		/**
		* Makes a HTTP POST request to the reCaptcha server to verify if the user's guess was correct.
		* 
		* When finished reCaptcha() emits an 'data'-event
		* with the treated reCaptcha server response.
		* 
		* reCaptcha server response examples:
		* { 'is_valid': true, 'error': 'success' }
		* { 'is_valid': false, 'error': 'incorrect-captcha-sol' }
		* 
		* The error value could be passed to the getHtml-Function.
		* 
		* @param {string} privateKey Your private key
		* @param {string} remoteIp The IP address of the captcha user
		* @param {string} challenge Challenges generated by the captcha field
		* @param {string} response Response entered by the user
		*/
		checkAnswer(privateKey: string, remoteIp: string, challenge: string, response: string);

		/**
		* Gets the challenge HTML (javascript and non-javascript version).
		* The resulting reCAPTCHA HTML widget is embedded within the HTML form it was called from.
		* 
		* @param string pubkey A public key for reCAPTCHA
		* @param string error The error given by reCaptcha response (optional)
		* @param boolean use_ssl Should the request be made over ssl? (optional)
		* @return string - The HTML to be embedded in the user's form.
		*/
		getCaptchaHtml(pubkey: string, error?: string, use_ssl?: boolean): string;

		/**
		* Adds an event listener for data calls on the recaptcha check
		*/
		on(event: string, callback: (res: ICaptureResponse) => void);
	}
}

